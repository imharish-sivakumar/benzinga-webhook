name: Go Webhook CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

jobs:
  lint:
    name: GolangCI Lint
    runs-on: ubuntu-latest
    env:
      GOMODCACHE: /tmp/go-mod-cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Lint using golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.63.4
          only-new-issues: true
          args: --timeout=5m

  test:
    name: Run Unit Tests and Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Install dependencies
        run: go mod tidy

      - name: Run unit tests with coverage
        run: |
          mkdir -p coverage
          go test ./... -v -coverprofile=coverage/coverage.out -covermode=atomic

      - name: Enforce coverage threshold
        run: |
          threshold=85
          coverage=$(go tool cover -func=coverage/coverage.out | grep total: | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: $coverage%"
          result=$(echo "$coverage >= $threshold" | bc)
          if [ "$result" -ne 1 ]; then
            echo "Code coverage $coverage% is below threshold of $threshold%"
            exit 1
          fi

      - name: Convert coverage to HTML
        run: go tool cover -html=coverage/coverage.out -o coverage/coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

      - name: Install go-junit-report
        run: go install github.com/jstemmer/go-junit-report@latest

      - name: Generate test report in JUnit format
        run: go test -v 2>&1 | tee test-report.txt | go-junit-report > report.xml

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: report.xml

      - name: Publish test summary to GitHub UI
        uses: dorny/test-reporter@v1
        with:
          name: Go Unit Tests
          path: report.xml
          reporter: java-junit

  semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep with auto config
        uses: returntocorp/semgrep-action@v1
        with:
          config: "auto"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, semgrep]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/webhook-receiver:latest
